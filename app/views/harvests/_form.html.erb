<%= form_for(@harvest) do |f| %>
  <% if @harvest.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@harvest.errors.count, "error") %> prohibited this harvest from being saved:</h2>
      <ul>
      <% @harvest.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
    <div class="col-lg-6 section">
      <div id="tech-label"><h2>Game Type</h2></div>
      <div class="selectables">
        <label>
          <input type="radio" value="turkey" name="harvest[animal_type]" id="harvest_animal_type_turkey" />
          <img src="https://s3.amazonaws.com/gametiks/images/turkey.png">
        </label>
        <label>
          <input type="radio" value="deer" name="harvest[animal_type]" id="harvest_animal_type_deer" />
          <img src="https://s3.amazonaws.com/gametiks/images/deer.png">
        </label>
        <label>
          <input type="radio" value="moose" name="harvest[animal_type]" id="harvest_animal_type_moose" />
          <img src="https://s3.amazonaws.com/gametiks/images/moose.png">
        </label>
        <label>
          <input type="radio" value="bear" name="harvest[animal_type]" id="harvest_animal_type_bear" />
          <img src="https://s3.amazonaws.com/gametiks/images/bear.png">
        </label>
      </div>
    </div>
    <div class="col-lg-6 section">
      <div id="tech-label"><h2>Weapon Type</h2></div>
      <div class="selectables">
        <label>
          <input type="radio" value="rifle" name="harvest[weapon_type]" id="harvest_weapon_type_rifle" />
          <img src="https://s3.amazonaws.com/gametiks/images/turkey.png">
        </label>
        <label>
          <input type="radio" value="shotgun" name="harvest[weapon_type]" id="harvest_weapon_type_shotgun" />
          <img src="https://s3.amazonaws.com/gametiks/images/deer.png">
        </label>
        <label>
          <input type="radio" value="bow" name="harvest[weapon_type]" id="harvest_weapon_type_bow" />
          <img src="https://s3.amazonaws.com/gametiks/images/moose.png">
        </label>
        <label>
          <input type="radio" value="other" name="harvest[weapon_type]" id="harvest_weapon_type_other" />
          <img src="https://s3.amazonaws.com/gametiks/images/bear.png">
        </label>
      </div>
    </div>
    <br>
  <div class="col-lg-6 section defined-height" id="harvest_details">
    <div id="tech-label"><h2>Weight (lbs)</h2>
    </div>
    <%= f.label 'Weight', class: "sr-only" %><%= f.text_field :weight, class: 'form-control judes-addition' %>
    <br>
    <div id="tech-label"><h2>Details (optional)</h2>
    </div>
    <%= f.label 'Details (Optional)', class: "sr-only" %><%= f.text_area(:description, :maxlength => 72, rows: 6, class: 'form-control judes-addition') %>
    <div id="tech-label"><h2>Image Upload</h2>
    </div>
    <%= f.label :image, class: "sr-only" %>
    <%= f.file_field :image%>
    <br>
  </div>
  <br>
  <div class="col-lg-6 section defined-height"> <div id="tech-label"><h2>Coordinates</h2>
    </div>
    <div id="map"></div>
    <div id="lat-long-fields">
     <%= f.number_field :latitude, id: :latitude, step: 'any' %>
     <%= f.number_field :longitude, id: :longitude, step: 'any' %> 
     </div>
     <br>
  </div>
  <br>
  <button type="submit" class="btn btn-default">
    Save Harvest
  </button>
  
<% end %>

<script>
var markers = [];
var userLat = <%= @user.latitude %>;
var userLng = <%= @user.longitude %>;

function initialize() {
  var map = new google.maps.Map(document.getElementById('map'), {
    zoom: 9,
    center: { lat: userLat, lng: userLng },
    mapTypeId: 'terrain',
    styles: [
            {
              featureType: 'landscape',
              stylers: [
                { saturation: -50 }
              ]
            },{
              featureType: 'water',
              stylers: [
                { hue: '#174a67' },
                { saturation: 50 },
                { lightness: -80 }
              ]
            },{
              featureType: 'road',
              elementType: 'geometry',
              stylers: [
                { hue: '#00ffee' },
                { saturation: 50 }
              ]
            },{
              featureType: 'poi',
              elementType: 'labels',
              stylers: [
                { visibility: 'off' }
              ]
            }
          ]
  });
  
  // This event listener calls addMarker() when the map is clicked.
  google.maps.event.addListener(map, 'click', function(event) {

    addMarker(event.latLng, map);
    map.panTo(event.latLng);
    var latitude = map.getCenter().lat().toFixed(6);
		var longitude = map.getCenter().lng().toFixed(6);
		document.getElementById("latitude").value = latitude;
		document.getElementById("longitude").value = longitude;
				
  });
}
    
// Adds a marker to the map.
function addMarker(location, map) {
  
  //simply clear out all items from array
  for (var i = 0; i < markers.length; i++) {
      markers[i].setMap(null);
  }
  markers = [];
  
  
  // create draggable marker 
  
  var marker = new google.maps.Marker({
    position: location,
    draggable: true,
    map: map
  });
  
  //add event to marker object on change
  google.maps.event.addListener(marker, 'dragend', function(event) {
    //alert(event.latLng.lat());
    var latitude = event.latLng.lat().toFixed(6);
		var longitude = event.latLng.lng().toFixed(6);
		document.getElementById("latitude").value = latitude;
		document.getElementById("longitude").value = longitude;
  });

  markers.push(marker);
}

function initMap(){
  initialize();
}

//google.maps.event.addDomListener(window, 'load', initialize);

</script>






//